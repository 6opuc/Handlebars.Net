name: CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Build netstandard2.0
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f netstandard2.0
      - name: Build netstandard1.3
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f netstandard1.3
      - name: Build net452
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f net452
        

  test-windows:
    runs-on: windows-latest
    needs: [build]
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Test
        working-directory: ./source
        run: dotnet test ./Handlebars.Test/Handlebars.Test.csproj -f netcoreapp3.1 --logger:trx


  test-linux:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Test
        working-directory: ./source
        run: dotnet test ./Handlebars.Test/Handlebars.Test.csproj -f netcoreapp3.1 --logger:trx


  test-macos:
    runs-on: macos-latest
    needs: [build]
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Test
        working-directory: ./source
        run: dotnet test ./Handlebars.Test/Handlebars.Test.csproj -f netcoreapp3.1 --logger:trx
  
  
  sonar-ci:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.102
    - name: Sonarscanner for dotnet
      uses: Secbyte/dotnet-sonarscanner@v2.2
      with:
        buildCommand: dotnet build source/Handlebars.Code.sln -f netstandard2.0
        testCommand: dotnet test source/Handlebars.Test/Handlebars.Test.csproj -f netcoreapp3.1 --logger:trx --collect:"XPlat Code Coverage" --settings source/Handlebars.Test/coverlet.settings.xml
        projectKey: zjklee_handlebars.csharp
        projectName: handlebars.csharp
        sonarOrganisation: zjklee
        beginArguments: >
            /d:sonar.verbose="true"
            /d:sonar.cs.opencover.reportsPaths="**/*.opencover.xml"
            /d:sonar.coverage.exclusions="**/*.md"
            /d:sonar.cs.vstest.reportsPaths="**/*.trx"
            
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        
  publish:
    needs: [build,test-windows,test-linux,test-macos,sonar-ci]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.100
      - name: Fetch
        run: git fetch --depth 500
      - name: Determine version
        run: echo "::set-env name=VERSION::$(git describe --tags --abbrev=0)"
        
      - name: Build netstandard2.0
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f netstandard2.0
      - name: Build netstandard1.3
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f netstandard1.3
      - name: Build net452
        working-directory: ./source
        run: dotnet build Handlebars.Code.sln -c Release -f net452
        
      - name: publish
        working-directory: ./source
        run: dotnet pack Handlebars.Code.sln --no-build -c Release  /p:version=${{ env.VERSION }}.${{ github.run_number }}-beta && dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json -n true
